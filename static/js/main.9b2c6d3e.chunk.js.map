{"version":3,"sources":["logo.svg","Listitems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","class","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,6MCoC5BC,MA/Bf,SAAmBC,GACjB,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAExB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACrC,2BACA,2BAAOC,KAAK,OACXC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SACE,SAACC,GACCZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAI1C,8BACA,kBAAE,IAAF,CAAkBD,UAAU,UAAUU,KAAK,QAC3CC,QAAU,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAM5C,OACE,6BACA,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC7BlB,K,eCxBPmB,IAAQC,IAAIC,K,IA+EGC,E,kDA5Eb,WAAYvB,GAAO,IAAD,8BAChB,cAAMA,IACDwB,MAAQ,CACXtB,MAAM,GACNuB,YAAY,CAACf,KAAK,GAAGJ,IAAI,KAI3B,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,WAAa,EAAKA,WAAWU,KAAhB,gBAClB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAXD,E,wDAcNf,GACViB,KAAKC,SAAS,CACZL,YAAY,CACVf,KAAKE,EAAEE,OAAOL,MACdH,IAAIyB,KAAKC,W,8BAKTpB,GACNA,EAAEqB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAE3B,GADAU,QAAQC,IAAIF,GACQ,KAAjBA,EAAQxB,KAAY,CACrB,IAAM2B,EAAS,GAAD,mBAAKR,KAAKL,MAAMtB,OAAhB,CAAuBgC,IACrCL,KAAKC,SAAS,CAEZ5B,MAAMmC,EAENZ,YAAY,CAACf,KAAK,GAAGJ,IAAI,S,iCAKpBA,GACT,IAAMgC,EAAgBT,KAAKL,MAAMtB,MAAMqC,QAAO,SAAAnC,GAAI,OAAIA,EAAKE,MAAMA,KACjEuB,KAAKC,SAAS,CACZ5B,MAAMoC,M,gCAIA5B,EAAMJ,GACd,IAAMJ,EAAQ2B,KAAKL,MAAMtB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAQA,IACdF,EAAKM,KAAOA,MAGhBmB,KAAKC,SAAS,CACZ5B,MAAMA,M,+BAKN,OACI,yBAAKsC,MAAM,OACT,gCACE,0BAAMhC,GAAG,aAAaiC,SAAUZ,KAAKD,SACnC,2BAAOrB,KAAK,OAAOmC,YAAY,kBAC/BjC,MAASoB,KAAKL,MAAMC,YAAYf,KAChCC,SAAYkB,KAAKH,cACjB,4BAAQc,MAAQ,MAAMjC,KAAK,UAA3B,OAGJ,kBAAC,EAAD,CAAWL,MAAS2B,KAAKL,MAAMtB,MAC/Be,WAAcY,KAAKZ,WACnBJ,UAAagB,KAAKhB,iB,GAvEV8B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.9b2c6d3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Listitems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport Flipmove from 'react-flip-move';\r\n\r\nfunction ListItems(props){\r\n  const items = props.items;\r\n  const listItems = items.map(item =>\r\n    {\r\n      return <div className=\"list\" key={item.key}>\r\n        <p>\r\n        <input type=\"text\"\r\n         id={item.key}\r\n         value={item.text}\r\n         onChange ={\r\n           (e) =>{\r\n             props.setUpdate(e.target.value, item.key)\r\n           }\r\n         }\r\n         />\r\n        <span>\r\n        < FontAwesomeIcon className=\"faicons\" icon='trash'\r\n        onClick={ () => props.deleteItem(item.key)}/>\r\n        </span>\r\n        </p>\r\n\r\n      </div>\r\n    })\r\n  return(\r\n    <div>\r\n    <Flipmove duration={300} easing=\"ease-in-out\">\r\n      {listItems}\r\n    </Flipmove>\r\n    </div>\r\n  )\r\n}\r\nexport default ListItems;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ListItems from './Listitems.js'\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n// class component to  render html\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      currentItem:{text:'',key:''}\n    }\n\n    //binding handleInput() & addItem() with the objects or constructor\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n\n  handleInput(e){\n    this.setState({\n      currentItem:{\n        text:e.target.value,\n        key:Date.now()\n      }\n    })\n  }\n\naddItem(e){\n  e.preventDefault();\n  const newItem = this.state.currentItem;\n  console.log(newItem);\n  if(newItem.text !== \"\"){\n    const newItems=[...this.state.items, newItem];\n    this.setState({\n      // Copyng newly generated item\n      items:newItems,\n      // removing items and making currentItem empty to take another newItem\n      currentItem:{text:'',key:''}\n    })\n  }\n}\n\ndeleteItem(key){\n  const filteredItems = this.state.items.filter(item => item.key!==key);\n  this.setState({\n    items:filteredItems\n  })\n}\n\nsetUpdate(text, key){\n  const items = this.state.items;\n  items.map(item =>{\n    if(item.key === key){\n      item.text = text;\n    }\n  })\n  this.setState({\n    items:items\n  })\n}\n\n  render(){\n    return (\n        <div class=\"App\">\n          <header>\n            <form id=\"to-do-form\" onSubmit={this.addItem}>\n              <input type=\"text\" placeholder=\"Write a note...\"\n              value = {this.state.currentItem.text}\n              onChange = {this.handleInput}/>\n              <button class = \"btn\" type=\"submit\">&#43;</button>\n            </form>\n          </header>\n          <ListItems items = {this.state.items}\n          deleteItem = {this.deleteItem}\n          setUpdate = {this.setUpdate}></ListItems>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}